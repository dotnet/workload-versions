jobs:
# Note: jobs.yml automatically includes the Publish Assets job for pushing the artifacts to DARC.
- template: /eng/common/templates-official/jobs/jobs.yml@source
  parameters:
    enableMicrobuild: true
    enablePublishBuildAssets: true
    enableTelemetry: true
    enablePublishUsingPipelines: true
    publishAssetsImmediately: true
    enableSbom: true
    repositoryAlias: source
    officialBuildId: $(OfficialBuildId)
    artifacts:
      publish:
        artifacts:
          name: Artifacts
        logs:
          name: Logs
        manifests: true
    jobs:
    - job: BuildRepo
      displayName: Build Repo
      timeoutInMinutes: 120
      pool:
        name: $(DncEngInternalBuildPool)
        image: 1es-windows-2022
        os: windows
      steps:
      - template: /eng/pipelines/templates/steps/workload-checkout.yml@self
        parameters:
          sourceBranchAlias: source
          engBranchAlias: self
      # Sets the run name to use the source branch commit message.
      # Also, sets the OfficialBuildId variable to the original Build.BuildNumber for use in Arcade.
      # See: https://learn.microsoft.com/en-us/azure/devops/pipelines/process/run-number
      - powershell: |
          Write-Host "##vso[task.setvariable variable=OfficialBuildId]$(Build.BuildNumber)"
          # Keep only valid characters. Invalid characters include: " / : < > \ | ? @ *
          # Also, strip any trailing '.' characters as those are invalid too.
          $commitMessage = "$(git log -1 --pretty=%s)".Trim() -replace '["\/:<>\\|?@*]|\.{1,}$', ''
          # Lastly, truncate to 255 max characters: 241 = 255 - 14 (for build number and delimiter, ex: 20250910.13 â€¢ )
          $commitMessage = $commitMessage.Substring(0, [Math]::Min($commitMessage.Length, 241))
          Write-Host "##vso[build.updatebuildnumber]$(Build.BuildNumber) â€¢ $commitMessage"
        displayName: ðŸŸ£ Set run name via source branch commit message
      - ${{ if eq(parameters.createVSInsertion, true) }}:
        # The convertToJson expression in AzDO creates "pretty" JSON with line breaks and indentation.
        # To simplify passing this JSON to scripts, we collapse it to a single line.
        - powershell: |
            $workloadDropNames = @'
            ${{ convertToJson(parameters.workloadDropNames) }}
            '@
            $workloadListJson = $workloadDropNames -replace '\r?\n\s*', ''
            Write-Host "##vso[task.setvariable variable=WorkloadListJson]$workloadListJson"
          displayName: ðŸŸ£ Set WorkloadListJson variable
        - task: AzureCLI@2
          displayName: ðŸŸ£ Download workloads for VS insertion
          inputs:
            azureSubscription: DotNetStaging
            scriptType: pscore
            scriptPath: $(System.DefaultWorkingDirectory)/eng/download-workloads.ps1
            # Note: The second $ for usePreComponents and includeNonShipping allows the value to resolve as `$true` or `$false`.
            arguments: >-
              -workloadPath '$(System.DefaultWorkingDirectory)/artifacts/workloads'
              -gitHubPat (ConvertTo-SecureString -String '$(BotAccount-dotnet-bot-repo-PAT)' -AsPlainText -Force)
              -azDOPat (ConvertTo-SecureString -String '$(dn-bot-all-drop-rw-code-rw-release-all)' -AsPlainText -Force)
              -workloadListJson '$(WorkloadListJson)'
              -usePreComponents:$${{ parameters.usePreComponentsForVSInsertion }}
              -includeNonShipping:$${{ parameters.includeNonShippingWorkloads }}

      # https://github.com/dotnet/arcade/blob/ccae251ef033746eb0213329953f5e3c1687693b/Documentation/CorePackages/Publishing.md#basic-onboarding-scenario-for-new-repositories-to-the-current-publishing-version-v3
      - powershell: >-
          eng/common/build.ps1
          -restore -build -sign -pack -publish -ci -msbuildEngine vs
          -configuration $(_BuildConfig)
          /p:CreateVSInsertion=${{ parameters.createVSInsertion }}
          /p:WorkloadDirectory=$(System.DefaultWorkingDirectory)/artifacts/workloads
          /p:DotNetSignType=$(_SignType)
          /p:TeamName=$(_TeamName)
          /p:DotNetPublishUsingPipelines=true
          /p:OfficialBuildId=$(OfficialBuildId)
          /p:StabilizePackageVersion=${{ parameters.stabilizePackageVersion }}
        displayName: ðŸŸ£ Build solution
        # Name is required to reference the variables created within this build step in other stages.
        name: BuildSolution

      - ${{ if eq(parameters.createVSInsertion, true) }}:
        - task: 1ES.PublishPipelineArtifact@1
          displayName: ðŸŸ£ Publish workload artifacts
          inputs:
            artifact: Workloads
            path: $(System.DefaultWorkingDirectory)/artifacts/workloads