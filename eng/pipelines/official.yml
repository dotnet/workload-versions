# Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE.md file in the project root for more information.

# Name: dotnet-workload-versions-official-ci
# URL: https://dev.azure.com/dnceng/internal/_build?definitionId=1298

# Produces the signed NuGet packages for workload versioning.

###################################################################################################################################################################
# PIPELINE METADATA
###################################################################################################################################################################

# Activates the pipeline after a PR is merged.
# See: https://docs.microsoft.com/azure/devops/pipelines/yaml-schema/trigger?view=azure-pipelines
trigger: none

# Activates PR builds for this pipeline.
# See: https://docs.microsoft.com/azure/devops/pipelines/yaml-schema/pr?view=azure-pipelines#examples
pr: none

parameters:
# When true, tries to publish
- name: publishToFeed
  displayName: Publish to feed
  type: boolean
  default: false
- name: feedToPublishTo
  displayName: Feed to publish to
  type: string
  default: 'public/dotnet8-workloads'

# Note: Only add pipeline variables if they apply to most of the stages/jobs.
variables:
- template: /eng/common/templates-official/variables/pool-providers.yml@self
  # The configuration for the build is used throughout the various pipelines as the file paths for output contain the build configuration as a folder name.
- name: BuildConfiguration
  value: Release
  # https://docs.microsoft.com/dotnet/core/tools/dotnet-environment-variables#dotnet_skip_first_time_experience
- name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE
  value: true
  # https://docs.microsoft.com/dotnet/core/tools/dotnet-environment-variables#dotnet_nologo
- name: DOTNET_NOLOGO
  value: true
  # https://devdiv.visualstudio.com/DevDiv/_wiki/wikis/DevDiv.wiki/26284/Enabling-SBOM-For-Your-Component-Insertion-into-VS?anchor=1.-add-the-%27manifest-generator-task%27-to-your-pipeline
- name: packaging.EnableSBOMSigning
  value: true
  # Opt out of automatically injecting Codesign Validation into the pipeline. We run Codesign Validation as part of the Compliance pipeline.
  # See: https://aka.ms/gdn-injection
- name: runCodesignValidationInjection
  value: false
  # Suspend enforcement of NuGet Single Feed Policy. See:
  # - https://aka.ms/nugetmultifeed
  # - https://docs.opensource.microsoft.com/tools/nuget_security_analysis/nuget_security_analysis/
  # - https://docs.opensource.microsoft.com/tools/cg/how-to/nuget-multifeed-configuration/
  # - https://onebranch.visualstudio.com/OneBranch/_wiki/wikis/OneBranch.wiki/5205/TSG-Build-Broken-Due-to-Using-Multiple-Feeds?anchor=setting-nugetsecurityanalysiswarninglevel-in-cdp
- name: NugetSecurityAnalysisWarningLevel
  value: none
  # Allows CodeQL to run on our Build job.
  # https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/codeql/configuring-codeql3000-ado-pipelines
- name: Codeql.Enabled
  value: true
  # Default to skipping auto-injection for CodeQL. It is not skipped in the Build job only.
  # https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/codeql/configuring-codeql3000-ado-pipelines#monolithic-repos-and-multistage-pipelines
- name: Codeql.SkipTaskAutoInjection
  value: true
- ${{ if eq(variables['_RunAsPublic'], 'true') }}:
  - name: _AdditionalBuildArgs
    value: ''
  - name: _BuildJobDisplayName
    value: 'Build and Test'
- ${{ else }}:
  - name: _AdditionalBuildArgs
    value: '/p:Test=false'
  - name: _BuildJobDisplayName
    value: 'Build, Sign and Publish'
- name: _TeamName
  value: DotNet-Cli
- name: HelixApiAccessToken
  value: ''
- name: _RunAsPublic
  value: True
- name: _RunAsInternal
  value: False
- name: _InternalBuildArgs
  value: ''
- ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
  - name: _RunAsPublic
    value: False
  - name: _RunAsInternal
    value: True
  - name: _SignType
    value: real
  # DotNet-Blob-Feed provides: dotnetfeed-storage-access-key-1
  # Publish-Build-Assets provides: MaestroAccessToken, BotAccount-dotnet-maestro-bot-PAT
  # DotNet-HelixApi-Access provides: HelixApiAccessToken
  - group: DotNet-Blob-Feed
  - group: Publish-Build-Assets
  - group: DotNet-HelixApi-Access
  - group: SDL_Settings
  - name: _InternalBuildArgs
    value: /p:DotNetSignType=$(_SignType)
      /p:TeamName=$(_TeamName)
      /p:DotNetPublishUsingPipelines=true
      /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
  - name: PostBuildSign
    value: true
resources:
  repositories:
  - repository: 1ESPipelineTemplates
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release
extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1ESPipelineTemplates
  parameters:
    pool:
      name: $(DncEngInternalBuildPool)
      image: 1es-windows-2022
      os: windows
    customBuildTags:
    - ES365AIMigrationTooling
    stages:
    - stage: Build
      displayName: Build
      jobs:
      - template: /eng/common/templates-official/jobs/jobs.yml@self
        parameters:
          artifacts:
            publish:
              artifacts: true
              logs: false
              manifests: true
          enableMicrobuild: true
          enablePublishUsingPipelines: true
          publishAssetsImmediately: true
          enablePublishTestResults: true
          testResultsFormat: vstest
          enableSourceIndex: ${{ and(eq(variables._RunAsInternal, True), eq(variables['Build.SourceBranch'], 'refs/heads/main')) }}
          workspace:
            clean: all
          jobs:
          - job: windows
            timeoutInMinutes: 60
            pool:
              ${{ if eq(variables._RunAsPublic, True) }}:
                vmImage: windows-latest
              ${{ if eq(variables._RunAsInternal, True) }}:
                name: $(DncEngInternalBuildPool)
                demands: ImageOverride -equals 1es-windows-2022
            strategy:
              matrix:
                release:
                  _BuildConfig: Release
            preSteps:
            - checkout: self
              fetchDepth: 0
              clean: true
            steps:
            - script: eng\common\CIBuild.cmd
                -configuration $(_BuildConfig)
                -prepareMachine
                $(_AdditionalBuildArgs)
                $(_InternalBuildArgs)
              displayName: $(_BuildJobDisplayName)
            - ${{ if eq(parameters.publishToFeed, true) }}:
              - task: 1ES.PublishNuget@1
                displayName: Publish Nuget package
                inputs:
                  useDotNetTask: true # The default is false to use the NuGetCommand task. Set to true to use the DotNetCoreCLI task to publish packages.
                  packagesToPush: '$(Build.SourcesDirectory)/artifacts/packages/**/*.nupkg'
                  packageParentPath: '$(Build.SourcesDirectory)/artifacts/packages'
                  publishVstsFeed: ${{ parameters.feedToPublishTo }} # Required when pushing to internal feed.
                  nuGetFeedType: internal  # Change to external when publishing to external feed
                  allowPackageConflicts: false # Optional. NuGetCommand task only.
                  publishPackageMetadata: true # Optional
    - ${{ if eq(variables._RunAsInternal, True) }}:
      - template: /eng/common/templates-official/post-build/post-build.yml@self
        parameters:
          publishAssetsImmediately: true
          SDLValidationParameters:
            enable: false
            params: ' -SourceToolsList $(_TsaSourceToolsList) 
              -TsaInstanceURL $(_TsaInstanceURL)
              -TsaProjectName $(_TsaProjectName)
              -TsaNotificationEmail $(_TsaNotificationEmail)
              -TsaCodebaseAdmin $(_TsaCodebaseAdmin)
              -TsaBugAreaPath $(_TsaBugAreaPath)
              -TsaIterationPath $(_TsaIterationPath)
              -TsaRepositoryName $(_TsaRepositoryName)
              -TsaCodebaseName $(_TsaCodebaseName)
              -TsaOnboard $(_TsaOnboard)
              -TsaPublish $(_TsaPublish)'
