<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE.md file in the project root for more information. -->
<Project Sdk="Microsoft.Build.NoTargets">

  <PropertyGroup>
    <TargetFramework>$(SdkTargetFramework)</TargetFramework>
    <!-- Allows the pack target to run on this project. -->
    <IsPackable>true</IsPackable>
    <!-- Runs pack when building. -->
    <!-- See: https://learn.microsoft.com/en-us/nuget/quickstart/create-and-publish-a-package-using-the-dotnet-cli#automatically-generate-package-on-build -->
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <!-- Disables NU5128 error when creating a package with no assemblies. -->
    <!-- See: https://learn.microsoft.com/en-us/nuget/reference/errors-and-warnings/nu5128#solution-1 -->
    <SuppressDependenciesWhenPacking>true</SuppressDependenciesWhenPacking>
    <PackageId>$(MSBuildProjectName).$(SDKFeatureBand)</PackageId>
    <!-- Adds a README.md to the NuGet package. -->
    <!-- See: https://devblogs.microsoft.com/nuget/add-a-readme-to-your-nuget-package/ -->
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <ReadmeFile>$(IntermediateOutputPath)README.md</ReadmeFile>
    <!-- LGHT1105: Warning generated from MSI creation process. -->
    <!-- See: https://github.com/orgs/wixtoolset/discussions/6715 -->
    <NoWarn>LGHT1105</NoWarn>
  </PropertyGroup>

  <Import Sdk="Microsoft.NET.Sdk" Project="Sdk.targets" />

  <ItemGroup>
    <PackageReference Include="Microsoft.Signed.WiX" Version="$(WixPackageVersion)" GeneratePathProperty="true" />
    <PackageReference Include="MicroBuild.Plugins.SwixBuild.Dotnet" Version="$(SwixPackageVersion)" GeneratePathProperty="true" />
    <PackageReference Include="Microsoft.DotNet.Build.Tasks.Installers" Version="$(MicrosoftDotNetBuildTasksInstallersVersion)" GeneratePathProperty="true" />
    <PackageReference Include="Microsoft.DotNet.Build.Tasks.Workloads" Version="$(MicrosoftDotNetBuildTasksWorkloadsPackageVersion)" GeneratePathProperty="true" />
  </ItemGroup>

  <PropertyGroup>
    <WixToolsetPath>$(PkgMicrosoft_Signed_Wix)\tools</WixToolsetPath>
    <SwixPluginPath>$(PkgMicroBuild_Plugins_SwixBuild_Dotnet)</SwixPluginPath>
    <SwixBuildTargets>$(SwixPluginPath)\build\MicroBuild.Plugins.SwixBuild.targets</SwixBuildTargets>
    <WorkloadIntermediateOutputPath>$(ArtifactsObjDir)workloads/</WorkloadIntermediateOutputPath>
    <WorkloadOutputPath>$(ArtifactsBinDir)workloads/</WorkloadOutputPath>
    <VSTemp>$(WorkloadIntermediateOutputPath)VS/</VSTemp>
  </PropertyGroup>

  <!-- Arcade -->
  <PropertyGroup>
    <!-- Temp directory for light command layouts -->
    <LightCommandObjDir>$(ArtifactsObjDir)/LightCommandPackages</LightCommandObjDir>
    <!-- Directory for the zipped up light command package -->
    <LightCommandPackagesDir>$(ArtifactsNonShippingPackagesDir)</LightCommandPackagesDir>
  </PropertyGroup>

  <ItemGroup>
    <Content Include="$(OutputPath)workloadset.json" Pack="true" PackagePath="data" />
    <None Include="$(ReadmeFile)" Pack="true" PackagePath="\"/>
    <!-- <ItemsToSign Include="$(PackageId).nupkg" /> -->
  </ItemGroup>

  <Import Project="workloads.props" />

  <Target Name="CreateWorkloadSetJson" BeforeTargets="Build">
    <PropertyGroup>
      <!-- %20 is the space character in ASCII for indentation. MSBuild normally doesn't allow leading whitespace. -->
      <!-- ',;' is used so each workload is treated as a new line via semi-colon and has the appropriate commas for JSON properties. -->
      <WorkloadsJson>@(WorkloadManifest->'%20%20&quot;%(Identity)&quot;: &quot;%(Version)/%(FeatureBand)&quot;', ',;')</WorkloadsJson>
    </PropertyGroup>
    <WriteLinesToFile File="$(OutputPath)workloadset.json" Lines="{;$(WorkloadsJson);}" Overwrite="true" />
  </Target>

  <Target Name="_GenerateMsiVersionString">
    <PropertyGroup>
      <VersionPadding Condition="'$(VersionPadding)'==''">5</VersionPadding>
      <!-- Using the following default comparison date will produce versions that align with our internal build system. -->
      <VersionComparisonDate Condition="'$(VersionComparisonDate)'==''">1996-04-01</VersionComparisonDate>
    </PropertyGroup>

    <GenerateCurrentVersion
        SeedDate="$([System.DateTime]::Now.ToString(yyyy-MM-dd))"
        OfficialBuildId="$(OfficialBuildId)"
        ComparisonDate="$(VersionComparisonDate)"
        Padding="$(VersionPadding)">
      <Output PropertyName="BuildNumberMajor" TaskParameter="GeneratedVersion" />
      <Output PropertyName="BuildNumberMinor" TaskParameter="GeneratedRevision" />
    </GenerateCurrentVersion>

    <GenerateMsiVersion
        Major="$(VersionMajor)"
        Minor="$(VersionMinor)"
        Patch="$(VersionSDKMinor)$(VersionFeature)"
        BuildNumberMajor="$(BuildNumberMajor)"
        BuildNumberMinor="$(BuildNumberMinor)">
      <Output TaskParameter="MsiVersion" PropertyName="MsiVersion" />
    </GenerateMsiVersion>
  </Target>

  <Target Name="ReplaceVersionStrings" BeforeTargets="GenerateNuspec">
    <WriteLinesToFile
        File="$(ReadmeFile)"
        Lines="$([System.IO.File]::ReadAllText($(PackageReadmeFile)).Replace('{SDKWVersion}','$(WorkloadsVersion)'))"
        Overwrite="true"
        Encoding="Unicode"/>
  </Target>

  <Target Name="CreateVisualStudioMsi" AfterTargets="Build" DependsOnTargets="GetAssemblyVersion;_GenerateMsiVersionString">
    <ItemGroup>
      <WorkloadSetPackage Include="$(ArtifactsShippingPackagesDir)/Microsoft.NET.Workloads.$(SDKFeatureBand).$(VersionMajor)*.nupkg" />
    </ItemGroup>

    <CreateVisualStudioWorkloadSet
        BaseIntermediateOutputPath="$(WorkloadIntermediateOutputPath)"
        BaseOutputPath="$(WorkloadOutputPath)"
        WorkloadSetPackageFiles="@(WorkloadSetPackage)"
        WixToolsetPath="$(WixToolsetPath)"
        WorkloadSetMsiVersion="$(MsiVersion)">
      <Output TaskParameter="SwixProjects" ItemName="SwixProjects" />
      <Output TaskParameter="Msis" ItemName="Msis" />
    </CreateVisualStudioWorkloadSet>

    <ItemGroup>
      <SwixWorkloadSetProjects Include="@(SwixProjects)" Condition="'%(PackageType)' == 'msi-workload-set'"
                                ManifestOutputPath="$(VStemp)\ws\%(SwixProjects.SdkFeatureBand)"
                                ZipFile="WorkloadSet.VSDrop.$(VersionMajor).$(VersionMinor)-%(SwixProjects.SdkFeatureBand).zip" />
      <MsiPackageProjects Include="%(Msis.PackageProject)" />
    </ItemGroup>

    <MSBuild Projects="@(SwixWorkloadSetProjects)" Properties="SwixBuildTargets=$(SwixBuildTargets);ManifestOutputPath=%(ManifestOutputPath)" />

    <ItemGroup>
      <VSDrop Include="%(SwixWorkloadSetProjects.ZipFile)" SourceDirectory="%(ManifestOutputPath)" />
    </ItemGroup>

    <MakeDir Directories="$(VisualStudioSetupInsertionPath)" />
    <ZipDirectory Overwrite="true" SourceDirectory="%(SourceDirectory)"
                  DestinationFile="$(VisualStudioSetupInsertionPath)%(VSDrop.Identity)" />

    <!-- Gather .wixobj files for post-build signing. We'll have to batch since we generated multiple MSIs in the previous step. -->
    <MSBuild Projects="$(MSBuildProjectFile)" Properties="_WixObjDir=%(Msis.WixObj);_Msi=%(Msis.Identity)" Targets="CreateWixPack" />

    <!-- We disable PackageValidation which runs because these projects import the repo's Directory.Build.props and Directory.Build.targets file. -->
    <MSBuild Projects="@(MsiPackageProjects)" Properties="OutputPath=$(ArtifactsShippingPackagesDir);IncludeSymbols=false;EnablePackageValidation=false" Targets="restore;pack" />
  </Target>

  <!-- Target to create a single wixpack for signing -->
  <Target Name="CreateWixPack">
    <ItemGroup>
      <_WixObj Include="$(_WixObjDir)\**\*.wixobj" />
    </ItemGroup>

    <CreateLightCommandPackageDrop
        LightCommandWorkingDir="$(LightCommandObjDir)"
        OutputFolder="$(LightCommandPackagesDir)"
        NoLogo="true"
        Cultures="en-us"
        InstallerFile="$(_Msi)"
        WixExtensions="WixUIExtension;WixDependencyExtension;WixUtilExtension"
        WixSrcFiles="@(_WixObj)">
      <Output TaskParameter="OutputFile" PropertyName="_LightCommandPackageNameOutput" />
    </CreateLightCommandPackageDrop>
  </Target>

</Project>
